package ibft

import (
	"testing"

	"github.com/dogechain-lab/dogechain/types"
	"github.com/stretchr/testify/assert"
)

func TestHeaderHash_Istanbul(t *testing.T) {
	types.HeaderHash = istanbulHeaderHash

	var bloom types.Bloom
	err := bloom.UnmarshalText([]byte("0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"))

	assert.NoError(t, err)

	// extra data with committed seals
	header := &types.Header{
		ParentHash:   types.StringToHash("0x5c9a69a525ab1d1916633b8a7b04e0bdbfcd8025eb8956b5fa21d2b083c85975"),
		Sha3Uncles:   types.StringToHash("0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347"),
		Miner:        types.StringToAddress("0x92bB5D1A856E54157232b43Fe1C9C7e89eE36ABE"),
		StateRoot:    types.StringToHash("0x9fdaa1e7ae5d8cec49112379659ed71be65e5688c417eca639fe7ec38b0d32b1"),
		TxRoot:       types.StringToHash("0x9288173bde40f14ca3f57d71fab06d183c23bd36946b139d8d02bd2e82a4b282"),
		ReceiptsRoot: types.StringToHash("0x5324de4c48309f931f099b5809a1152f50ed29f41bd52959a279360ecf41d21c"),
		LogsBloom:    bloom,
		Difficulty:   4673137,
		Number:       4673137,
		GasLimit:     30000000,
		GasUsed:      68394,
		Timestamp:    1669026295,
		ExtraData:    types.StringToBytes("0x0000000000000000000000000000000000000000000000000000000000000000f90164f85494d668bba507d0438ff22ee8ceb341323765669a24947175996ff9dcb8fbb83b68e2b88f1a029014555b9492bb5d1a856e54157232b43fe1c9c7e89ee36abe9464f2686e3ac7492c3b3f662d32ecb8b6bfa548feb841e1d474f04a202dc7438d9766dc0c3dfbd1a0976a8c217753d5282011ae2efc51033441793681da9c306a6d07782b0a1349c3f38ad4d22002f8204f699c9ccf5100f8c9b84109f96f03367fdc05ed88485dec7148ff5fbe12883f986587d8a34bd3476a647b449ef3cce693891ee6bc260adef7090f3c668fdbd93aeb5e41f6dca2cabb001d01b841b65d9140e3c64c066c770cef1aa5541cb225a1868642b0a4ff38855b5b33b1d869904c49a80184d1a882240956b63b30cd917f1d029148d61e614d2aa79dcc7200b841b81f0edf79f241479e1e9b4f25724147f4e82c40dc6281c51d11b7d34e5cf81967d812c0278e55c765313f47e970bc5dd039acd9ef8db358e0d5ffcccf0d3fca00"),
		MixHash:      types.StringToHash("0x63746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365"),
		Nonce:        types.Nonce{},
	}

	assert.Equal(t, types.StringToHash("0x2c35e77c08c21424de5e67aa8a5c7a614c91f790a7be5a2fd4e77cd49854fcff"), types.HeaderHash(header))
}
