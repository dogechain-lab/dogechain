package staking

import (
	"errors"
	"fmt"
	"math/big"

	"github.com/dogechain-lab/jury/chain"
	"github.com/dogechain-lab/jury/helper/common"
	"github.com/dogechain-lab/jury/helper/hex"
	"github.com/dogechain-lab/jury/helper/keccak"
	"github.com/dogechain-lab/jury/types"
)

// getAddressMapping returns the key for the SC storage mapping (address => something)
//
// More information:
// https://docs.soliditylang.org/en/latest/internals/layout_in_storage.html
func getAddressMapping(address types.Address, slot int64) []byte {
	bigSlot := big.NewInt(slot)

	finalSlice := append(
		common.PadLeftOrTrim(address.Bytes(), 32),
		common.PadLeftOrTrim(bigSlot.Bytes(), 32)...,
	)
	keccakValue := keccak.Keccak256(nil, finalSlice)

	return keccakValue
}

// getIndexWithOffset is a helper method for adding an offset to the already found keccak hash
func getIndexWithOffset(keccakHash []byte, offset int64) []byte {
	bigOffset := big.NewInt(offset)
	bigKeccak := big.NewInt(0).SetBytes(keccakHash)

	bigKeccak.Add(bigKeccak, bigOffset)

	return bigKeccak.Bytes()
}

// getStorageIndexes is a helper function for getting the correct indexes
// of the storage slots which need to be modified during bootstrap.
//
// It is SC dependant, and based on the SC located at:
// https://github.com/dogechain-lab/jury-contracts
func getStorageIndexes(address types.Address, index int64) *StorageIndexes {
	storageIndexes := StorageIndexes{}

	// Get the indexes for the mappings
	// The index for the mapping is retrieved with:
	// keccak(address . slot)
	// . stands for concatenation (basically appending the bytes)
	storageIndexes.AddressToIsValidatorIndex = getAddressMapping(address, addressToIsValidatorSlot)
	storageIndexes.AddressToStakedAmountIndex = getAddressMapping(address, addressToStakedAmountSlot)
	storageIndexes.AddressToValidatorIndexIndex = getAddressMapping(address, addressToValidatorIndexSlot)

	// Get the indexes for _owner, _validators, _stakedAmount, etc
	// Index for regular types is calculated as just the regular slot
	storageIndexes.OwnerIndex = big.NewInt(ownerSlot).Bytes()
	storageIndexes.ThresholdIndex = big.NewInt(thresholdSlot).Bytes()
	storageIndexes.MinimumIndex = big.NewInt(minimumSlot).Bytes()
	storageIndexes.StakedAmountIndex = big.NewInt(stakedAmountSlot).Bytes()

	// Index for array types is calculated as keccak(slot) + index
	// The slot for the dynamic arrays that's put in the keccak needs to be in hex form (padded 64 chars)
	storageIndexes.ValidatorsIndex = getIndexWithOffset(
		keccak.Keccak256(nil, common.PadLeftOrTrim(big.NewInt(validatorsSlot).Bytes(), 32)),
		index,
	)

	// For any dynamic array in Solidity, the size of the actual array should be
	// located on slot x
	storageIndexes.ValidatorsArraySizeIndex = []byte{byte(validatorsSlot)}

	return &storageIndexes
}

// PredeployParams contains the values used to predeploy the PoS staking contract
type PredeployParams struct {
	Owner      types.Address
	Validators []types.Address
}

// StorageIndexes is a wrapper for different storage indexes that
// need to be modified
type StorageIndexes struct {
	OwnerIndex                   []byte // address
	ThresholdIndex               []byte // uint256
	MinimumIndex                 []byte // uint256
	ValidatorsIndex              []byte // []address
	ValidatorsArraySizeIndex     []byte // []address size
	AddressToIsValidatorIndex    []byte // mapping(address => bool)
	AddressToStakedAmountIndex   []byte // mapping(address => uint256)
	AddressToValidatorIndexIndex []byte // mapping(address => uint256)
	StakedAmountIndex            []byte // uint256
	GovernorIndex                []byte // address
}

// Slot definitions for SC storage
const (
	ownerSlot = int64(iota) // Slot 0
	thresholdSlot
	minimumSlot
	validatorsSlot
	addressToIsValidatorSlot
	addressToStakedAmountSlot
	addressToValidatorIndexSlot
	stakedAmountSlot
	// governorSlot
)

const (
	DefaultStakedBalance = "0x84595161401484A000000" // 10_000_000 DC
	//nolint: lll
	StakingSCBytecode = "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80638da5cb5b11610097578063d0a5e6ce11610066578063d0a5e6ce14610226578063f2fde38b14610242578063f90ecacc1461025e578063facd743b1461028e576100f5565b80638da5cb5b146101b2578063960bfe04146101d0578063a694fc3a146101ec578063ca1e781914610208576100f5565b80632def6620116100d35780632def6620146101645780633209e9e61461016e578063373d61321461018a578063715018a6146101a8576100f5565b80630c340a24146100fa5780631327d3d8146101185780632367f6b514610134575b600080fd5b6101026102be565b60405161010f91906117ae565b60405180910390f35b610132600480360381019061012d9190611501565b6102e8565b005b61014e60048036038101906101499190611501565b6105ab565b60405161015b91906119a8565b60405180910390f35b61016c6105f4565b005b6101886004803603810190610183919061155b565b6108d6565b005b61019261096e565b60405161019f91906119a8565b60405180910390f35b6101b0610978565b005b6101ba610a12565b6040516101c791906117ae565b60405180910390f35b6101ea60048036038101906101e5919061155b565b610a3b565b005b6102066004803603810190610201919061155b565b610ad3565b005b610210610d1e565b60405161021d9190611829565b60405180910390f35b610240600480360381019061023b9190611501565b610dac565b005b61025c60048036038101906102579190611501565b610e7e565b005b6102786004803603810190610273919061155b565b610f88565b60405161028591906117ae565b60405180910390f35b6102a860048036038101906102a39190611501565b610fc7565b6040516102b5919061184b565b60405180910390f35b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610376576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036d90611908565b60405180910390fd5b600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561041f5760025460038054905011610411576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040890611968565b60405180910390fd5b61041a8161101d565b6105a8565b600154600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156104a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049a90611988565b60405180910390fd5b600380549050600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506003819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6106133373ffffffffffffffffffffffffffffffffffffffff166112cf565b15610653576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064a90611948565b60405180910390fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081116106da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d1906118e8565b60405180910390fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610734816007546112f290919063ffffffff16565b600781905550600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610797929190611800565b602060405180830381600087803b1580156107b157600080fd5b505af11580156107c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e9919061152e565b50600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161561088f5760025460038054905011610885576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087c90611968565b60405180910390fd5b61088e3361101d565b5b803373ffffffffffffffffffffffffffffffffffffffff167f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f7560405160405180910390a350565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610964576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095b90611908565b60405180910390fd5b8060028190555050565b6000600754905090565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610a06576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fd90611908565b60405180910390fd5b610a10600061133c565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610ac9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac090611908565b60405180910390fd5b8060018190555050565b610af23373ffffffffffffffffffffffffffffffffffffffff166112cf565b15610b32576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2990611948565b60405180910390fd5b60008111610b75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6c906118a8565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401610bd4939291906117c9565b602060405180830381600087803b158015610bee57600080fd5b505af1158015610c02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c26919061152e565b50610c7981600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461140090919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610cd18160075461140090919063ffffffff16565b600781905550803373ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d60405160405180910390a350565b60606003805480602002602001604051908101604052809291908181526020018280548015610da257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610d58575b5050505050905090565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610e3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3190611908565b60405180910390fd5b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610f0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0390611908565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7390611888565b60405180910390fd5b610f858161133c565b50565b60038181548110610f9857600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b600380549050600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054106110a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109a90611928565b60405180910390fd5b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600061110260016003805490506112f290919063ffffffff16565b90508082146111f15760006003828154811061112157611120611b7b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050806003848154811061116357611162611b7b565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff0219169055600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009055600380548061129557611294611b4c565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600061133483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061145e565b905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080828461140f9190611a18565b905083811015611454576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144b906118c8565b60405180910390fd5b8091505092915050565b60008383111582906114a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149d9190611866565b60405180910390fd5b50600083856114b59190611a6e565b9050809150509392505050565b6000813590506114d181611d7d565b92915050565b6000815190506114e681611d94565b92915050565b6000813590506114fb81611dab565b92915050565b60006020828403121561151757611516611baa565b5b6000611525848285016114c2565b91505092915050565b60006020828403121561154457611543611baa565b5b6000611552848285016114d7565b91505092915050565b60006020828403121561157157611570611baa565b5b600061157f848285016114ec565b91505092915050565b600061159483836115a0565b60208301905092915050565b6115a981611aa2565b82525050565b6115b881611aa2565b82525050565b60006115c9826119d3565b6115d381856119f6565b93506115de836119c3565b8060005b8381101561160f5781516115f68882611588565b9750611601836119e9565b9250506001810190506115e2565b5085935050505092915050565b61162581611ab4565b82525050565b6000611636826119de565b6116408185611a07565b9350611650818560208601611aea565b61165981611baf565b840191505092915050565b6000611671602683611a07565b915061167c82611bc0565b604082019050919050565b6000611694600e83611a07565b915061169f82611c0f565b602082019050919050565b60006116b7601b83611a07565b91506116c282611c38565b602082019050919050565b60006116da601d83611a07565b91506116e582611c61565b602082019050919050565b60006116fd601c83611a07565b915061170882611c8a565b602082019050919050565b6000611720601283611a07565b915061172b82611cb3565b602082019050919050565b6000611743601a83611a07565b915061174e82611cdc565b602082019050919050565b6000611766602583611a07565b915061177182611d05565b604082019050919050565b6000611789601d83611a07565b915061179482611d54565b602082019050919050565b6117a881611ae0565b82525050565b60006020820190506117c360008301846115af565b92915050565b60006060820190506117de60008301866115af565b6117eb60208301856115af565b6117f8604083018461179f565b949350505050565b600060408201905061181560008301856115af565b611822602083018461179f565b9392505050565b6000602082019050818103600083015261184381846115be565b905092915050565b6000602082019050611860600083018461161c565b92915050565b60006020820190508181036000830152611880818461162b565b905092915050565b600060208201905081810360008301526118a181611664565b9050919050565b600060208201905081810360008301526118c181611687565b9050919050565b600060208201905081810360008301526118e1816116aa565b9050919050565b60006020820190508181036000830152611901816116cd565b9050919050565b60006020820190508181036000830152611921816116f0565b9050919050565b6000602082019050818103600083015261194181611713565b9050919050565b6000602082019050818103600083015261196181611736565b9050919050565b6000602082019050818103600083015261198181611759565b9050919050565b600060208201905081810360008301526119a18161177c565b9050919050565b60006020820190506119bd600083018461179f565b92915050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000611a2382611ae0565b9150611a2e83611ae0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611a6357611a62611b1d565b5b828201905092915050565b6000611a7982611ae0565b9150611a8483611ae0565b925082821015611a9757611a96611b1d565b5b828203905092915050565b6000611aad82611ac0565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015611b08578082015181840152602081019050611aed565b83811115611b17576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f496e76616c696420616d6f756e74000000000000000000000000000000000000600082015250565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000600082015250565b7f4f6e6c79207374616b65722063616e2063616c6c2066756e6374696f6e000000600082015250565b7f4f6e6c79206f776e65722063616e2063616c6c2066756e6374696f6e00000000600082015250565b7f696e646578206f7574206f662072616e67650000000000000000000000000000600082015250565b7f4f6e6c7920454f412063616e2063616c6c2066756e6374696f6e000000000000600082015250565b7f56616c696461746f72732063616e2774206265206c657373207468616e206d6960008201527f6e696d756d000000000000000000000000000000000000000000000000000000602082015250565b7f4163636f756e74206d757374206265207374616b656420656e6f756768000000600082015250565b611d8681611aa2565b8114611d9157600080fd5b50565b611d9d81611ab4565b8114611da857600080fd5b50565b611db481611ae0565b8114611dbf57600080fd5b5056fea26469706673582212200c1cd281dd703d0242b8d0d8aeeb02d0b2d89cb8e57690f02e1b2124b1db945f64736f6c63430008060033"
)

// PredeployStakingSC is a helper method for setting up the staking smart contract account,
// using the passed in validators as pre-staked validators
func PredeployStakingSC(params PredeployParams) (*chain.GenesisAccount, error) {
	// Set the code for the staking smart contract
	// Code retrieved from https://github.com/dogechain-lab/jury-contracts
	scHex, _ := hex.DecodeHex(StakingSCBytecode)
	stakingAccount := &chain.GenesisAccount{
		Code: scHex,
	}

	// Parse the default staked balance value into *big.Int
	val := DefaultStakedBalance
	bigDefaultStakedBalance, err := types.ParseUint256orHex(&val)

	if err != nil {
		return nil, fmt.Errorf("unable to generate DefaultStatkedBalance, %w", err)
	}

	if params.Owner == types.ZeroAddress {
		return nil, errors.New("contract owner should not be empty")
	}

	// Generate the empty account storage map
	storageMap := make(map[types.Hash]types.Hash)
	bigOne := big.NewInt(1)
	bigTrueValue := big.NewInt(1)
	stakedAmount := big.NewInt(0)

	for indx, validator := range params.Validators {
		// Update the total staked amount
		stakedAmount.Add(stakedAmount, bigDefaultStakedBalance)

		// Get the storage indexes
		storageIndexes := getStorageIndexes(validator, int64(indx))

		// Set the value for the owner
		storageMap[types.BytesToHash(storageIndexes.OwnerIndex)] =
			types.BytesToHash(params.Owner.Bytes())

		// Set the value for the threshold
		storageMap[types.BytesToHash(storageIndexes.ThresholdIndex)] =
			types.BytesToHash(bigDefaultStakedBalance.Bytes())

		// Set the value for the owner
		storageMap[types.BytesToHash(storageIndexes.MinimumIndex)] =
			types.BytesToHash(bigOne.Bytes())

		// Set the value for the validators array
		storageMap[types.BytesToHash(storageIndexes.ValidatorsIndex)] =
			types.BytesToHash(
				validator.Bytes(),
			)

		// Set the value for the address -> validator array index mapping
		storageMap[types.BytesToHash(storageIndexes.AddressToIsValidatorIndex)] =
			types.BytesToHash(bigTrueValue.Bytes())

		// Set the value for the address -> staked amount mapping
		storageMap[types.BytesToHash(storageIndexes.AddressToStakedAmountIndex)] =
			types.StringToHash(hex.EncodeBig(bigDefaultStakedBalance))

		// Set the value for the address -> validator index mapping
		storageMap[types.BytesToHash(storageIndexes.AddressToValidatorIndexIndex)] =
			types.StringToHash(hex.EncodeUint64(uint64(indx)))

		// Set the value for the total staked amount
		storageMap[types.BytesToHash(storageIndexes.StakedAmountIndex)] =
			types.BytesToHash(stakedAmount.Bytes())

		// Set the value for the size of the validators array
		storageMap[types.BytesToHash(storageIndexes.ValidatorsArraySizeIndex)] =
			types.StringToHash(hex.EncodeUint64(uint64(indx + 1)))
	}

	// Save the storage map
	stakingAccount.Storage = storageMap

	// Set the Staking SC balance to numValidators * defaultStakedBalance
	stakingAccount.Balance = stakedAmount

	return stakingAccount, nil
}
