package staking

import (
	"errors"
	"fmt"
	"math/big"

	"github.com/dogechain-lab/jury/chain"
	"github.com/dogechain-lab/jury/helper/common"
	"github.com/dogechain-lab/jury/helper/hex"
	"github.com/dogechain-lab/jury/helper/keccak"
	"github.com/dogechain-lab/jury/types"
)

// getAddressMapping returns the key for the SC storage mapping (address => something)
//
// More information:
// https://docs.soliditylang.org/en/latest/internals/layout_in_storage.html
func getAddressMapping(address types.Address, slot int64) []byte {
	bigSlot := big.NewInt(slot)

	finalSlice := append(
		common.PadLeftOrTrim(address.Bytes(), 32),
		common.PadLeftOrTrim(bigSlot.Bytes(), 32)...,
	)
	keccakValue := keccak.Keccak256(nil, finalSlice)

	return keccakValue
}

// getIndexWithOffset is a helper method for adding an offset to the already found keccak hash
func getIndexWithOffset(keccakHash []byte, offset int64) []byte {
	bigOffset := big.NewInt(offset)
	bigKeccak := big.NewInt(0).SetBytes(keccakHash)

	bigKeccak.Add(bigKeccak, bigOffset)

	return bigKeccak.Bytes()
}

// getStorageIndexes is a helper function for getting the correct indexes
// of the storage slots which need to be modified during bootstrap.
//
// It is SC dependant, and based on the SC located at:
// https://github.com/dogechain-lab/jury-contracts
func getStorageIndexes(address types.Address, index int64) *StorageIndexes {
	storageIndexes := StorageIndexes{}

	// Get the indexes for the mappings
	// The index for the mapping is retrieved with:
	// keccak(address . slot)
	// . stands for concatenation (basically appending the bytes)
	storageIndexes.AddressToIsValidatorIndex = getAddressMapping(address, addressToIsValidatorSlot)
	storageIndexes.AddressToStakedAmountIndex = getAddressMapping(address, addressToStakedAmountSlot)
	storageIndexes.AddressToValidatorIndexIndex = getAddressMapping(address, addressToValidatorIndexSlot)

	// Get the indexes for _owner, _validators, _stakedAmount, etc
	// Index for regular types is calculated as just the regular slot
	storageIndexes.OwnerIndex = big.NewInt(ownerSlot).Bytes()
	storageIndexes.ThresholdIndex = big.NewInt(thresholdSlot).Bytes()
	storageIndexes.MinimumIndex = big.NewInt(minimumSlot).Bytes()
	storageIndexes.StakedAmountIndex = big.NewInt(stakedAmountSlot).Bytes()

	// Index for array types is calculated as keccak(slot) + index
	// The slot for the dynamic arrays that's put in the keccak needs to be in hex form (padded 64 chars)
	storageIndexes.ValidatorsIndex = getIndexWithOffset(
		keccak.Keccak256(nil, common.PadLeftOrTrim(big.NewInt(validatorsSlot).Bytes(), 32)),
		index,
	)

	// For any dynamic array in Solidity, the size of the actual array should be
	// located on slot x
	storageIndexes.ValidatorsArraySizeIndex = []byte{byte(validatorsSlot)}

	return &storageIndexes
}

// PredeployParams contains the values used to predeploy the PoS staking contract
type PredeployParams struct {
	Owner      types.Address
	Validators []types.Address
}

// StorageIndexes is a wrapper for different storage indexes that
// need to be modified
type StorageIndexes struct {
	OwnerIndex                   []byte // address
	ThresholdIndex               []byte // uint256
	MinimumIndex                 []byte // uint256
	ValidatorsIndex              []byte // []address
	ValidatorsArraySizeIndex     []byte // []address size
	AddressToIsValidatorIndex    []byte // mapping(address => bool)
	AddressToStakedAmountIndex   []byte // mapping(address => uint256)
	AddressToValidatorIndexIndex []byte // mapping(address => uint256)
	StakedAmountIndex            []byte // uint256
	GovernorIndex                []byte // address
}

// Slot definitions for SC storage
const (
	ownerSlot = int64(iota) // Slot 0
	thresholdSlot
	minimumSlot
	validatorsSlot
	addressToIsValidatorSlot
	addressToStakedAmountSlot
	addressToValidatorIndexSlot
	stakedAmountSlot
	// governorSlot
)

const (
	DefaultStakedBalance = "0x84595161401484A000000" // 10_000_000 DC
	//nolint: lll
	StakingSCBytecode = "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c8063715018a6116100a2578063ca1e781911610071578063ca1e78191461025a578063d0a5e6ce14610278578063f2fde38b14610294578063f90ecacc146102b0578063facd743b146102e05761010b565b8063715018a6146101fa5780638da5cb5b14610204578063960bfe0414610222578063a694fc3a1461023e5761010b565b80633209e9e6116100de5780633209e9e614610184578063373d6132146101a057806342cde4e8146101be57806352d6804d146101dc5761010b565b80630c340a24146101105780631327d3d81461012e5780632367f6b51461014a5780632def66201461017a575b600080fd5b610118610310565b6040516101259190611814565b60405180910390f35b61014860048036038101906101439190611567565b61033a565b005b610164600480360381019061015f9190611567565b6105fd565b6040516101719190611a0e565b60405180910390f35b610182610646565b005b61019e600480360381019061019991906115c1565b610928565b005b6101a86109c0565b6040516101b59190611a0e565b60405180910390f35b6101c66109ca565b6040516101d39190611a0e565b60405180910390f35b6101e46109d4565b6040516101f19190611a0e565b60405180910390f35b6102026109de565b005b61020c610a78565b6040516102199190611814565b60405180910390f35b61023c600480360381019061023791906115c1565b610aa1565b005b610258600480360381019061025391906115c1565b610b39565b005b610262610d84565b60405161026f919061188f565b60405180910390f35b610292600480360381019061028d9190611567565b610e12565b005b6102ae60048036038101906102a99190611567565b610ee4565b005b6102ca60048036038101906102c591906115c1565b610fee565b6040516102d79190611814565b60405180910390f35b6102fa60048036038101906102f59190611567565b61102d565b60405161030791906118b1565b60405180910390f35b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146103c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103bf9061196e565b60405180910390fd5b600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156104715760025460038054905011610463576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045a906119ce565b60405180910390fd5b61046c81611083565b6105fa565b600154600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156104f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ec906119ee565b60405180910390fd5b600380549050600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506003819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6106653373ffffffffffffffffffffffffffffffffffffffff16611335565b156106a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069c906119ae565b60405180910390fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811161072c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107239061194e565b60405180910390fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506107868160075461135890919063ffffffff16565b600781905550600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016107e9929190611866565b602060405180830381600087803b15801561080357600080fd5b505af1158015610817573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083b9190611594565b50600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156108e157600254600380549050116108d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ce906119ce565b60405180910390fd5b6108e033611083565b5b803373ffffffffffffffffffffffffffffffffffffffff167f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f7560405160405180910390a350565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146109b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ad9061196e565b60405180910390fd5b8060028190555050565b6000600754905090565b6000600154905090565b6000600254905090565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610a6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a639061196e565b60405180910390fd5b610a7660006113a2565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610b2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b269061196e565b60405180910390fd5b8060018190555050565b610b583373ffffffffffffffffffffffffffffffffffffffff16611335565b15610b98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8f906119ae565b60405180910390fd5b60008111610bdb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd29061190e565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401610c3a9392919061182f565b602060405180830381600087803b158015610c5457600080fd5b505af1158015610c68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8c9190611594565b50610cdf81600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461146690919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d378160075461146690919063ffffffff16565b600781905550803373ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d60405160405180910390a350565b60606003805480602002602001604051908101604052809291908181526020018280548015610e0857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610dbe575b5050505050905090565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610ea0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e979061196e565b60405180910390fd5b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610f72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f699061196e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610fe2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd9906118ee565b60405180910390fd5b610feb816113a2565b50565b60038181548110610ffe57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b600380549050600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410611109576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111009061198e565b60405180910390fd5b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000611168600160038054905061135890919063ffffffff16565b90508082146112575760006003828154811061118757611186611be1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600384815481106111c9576111c8611be1565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff0219169055600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000905560038054806112fb576112fa611bb2565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600061139a83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506114c4565b905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008082846114759190611a7e565b9050838110156114ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114b19061192e565b60405180910390fd5b8091505092915050565b600083831115829061150c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150391906118cc565b60405180910390fd5b506000838561151b9190611ad4565b9050809150509392505050565b60008135905061153781611de3565b92915050565b60008151905061154c81611dfa565b92915050565b60008135905061156181611e11565b92915050565b60006020828403121561157d5761157c611c10565b5b600061158b84828501611528565b91505092915050565b6000602082840312156115aa576115a9611c10565b5b60006115b88482850161153d565b91505092915050565b6000602082840312156115d7576115d6611c10565b5b60006115e584828501611552565b91505092915050565b60006115fa8383611606565b60208301905092915050565b61160f81611b08565b82525050565b61161e81611b08565b82525050565b600061162f82611a39565b6116398185611a5c565b935061164483611a29565b8060005b8381101561167557815161165c88826115ee565b975061166783611a4f565b925050600181019050611648565b5085935050505092915050565b61168b81611b1a565b82525050565b600061169c82611a44565b6116a68185611a6d565b93506116b6818560208601611b50565b6116bf81611c15565b840191505092915050565b60006116d7602683611a6d565b91506116e282611c26565b604082019050919050565b60006116fa600e83611a6d565b915061170582611c75565b602082019050919050565b600061171d601b83611a6d565b915061172882611c9e565b602082019050919050565b6000611740601d83611a6d565b915061174b82611cc7565b602082019050919050565b6000611763601c83611a6d565b915061176e82611cf0565b602082019050919050565b6000611786601283611a6d565b915061179182611d19565b602082019050919050565b60006117a9601a83611a6d565b91506117b482611d42565b602082019050919050565b60006117cc602583611a6d565b91506117d782611d6b565b604082019050919050565b60006117ef601d83611a6d565b91506117fa82611dba565b602082019050919050565b61180e81611b46565b82525050565b60006020820190506118296000830184611615565b92915050565b60006060820190506118446000830186611615565b6118516020830185611615565b61185e6040830184611805565b949350505050565b600060408201905061187b6000830185611615565b6118886020830184611805565b9392505050565b600060208201905081810360008301526118a98184611624565b905092915050565b60006020820190506118c66000830184611682565b92915050565b600060208201905081810360008301526118e68184611691565b905092915050565b60006020820190508181036000830152611907816116ca565b9050919050565b60006020820190508181036000830152611927816116ed565b9050919050565b6000602082019050818103600083015261194781611710565b9050919050565b6000602082019050818103600083015261196781611733565b9050919050565b6000602082019050818103600083015261198781611756565b9050919050565b600060208201905081810360008301526119a781611779565b9050919050565b600060208201905081810360008301526119c78161179c565b9050919050565b600060208201905081810360008301526119e7816117bf565b9050919050565b60006020820190508181036000830152611a07816117e2565b9050919050565b6000602082019050611a236000830184611805565b92915050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000611a8982611b46565b9150611a9483611b46565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611ac957611ac8611b83565b5b828201905092915050565b6000611adf82611b46565b9150611aea83611b46565b925082821015611afd57611afc611b83565b5b828203905092915050565b6000611b1382611b26565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015611b6e578082015181840152602081019050611b53565b83811115611b7d576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f496e76616c696420616d6f756e74000000000000000000000000000000000000600082015250565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000600082015250565b7f4f6e6c79207374616b65722063616e2063616c6c2066756e6374696f6e000000600082015250565b7f4f6e6c79206f776e65722063616e2063616c6c2066756e6374696f6e00000000600082015250565b7f696e646578206f7574206f662072616e67650000000000000000000000000000600082015250565b7f4f6e6c7920454f412063616e2063616c6c2066756e6374696f6e000000000000600082015250565b7f56616c696461746f72732063616e2774206265206c657373207468616e206d6960008201527f6e696d756d000000000000000000000000000000000000000000000000000000602082015250565b7f4163636f756e74206d757374206265207374616b656420656e6f756768000000600082015250565b611dec81611b08565b8114611df757600080fd5b50565b611e0381611b1a565b8114611e0e57600080fd5b50565b611e1a81611b46565b8114611e2557600080fd5b5056fea26469706673582212202861821ba4a4e09b11eb52df64dedba63f5255fb817f719954e5908a3e373ee764736f6c63430008060033"
)

// PredeployStakingSC is a helper method for setting up the staking smart contract account,
// using the passed in validators as pre-staked validators
func PredeployStakingSC(params PredeployParams) (*chain.GenesisAccount, error) {
	// Set the code for the staking smart contract
	// Code retrieved from https://github.com/dogechain-lab/jury-contracts
	scHex, _ := hex.DecodeHex(StakingSCBytecode)
	stakingAccount := &chain.GenesisAccount{
		Code: scHex,
	}

	// Parse the default staked balance value into *big.Int
	val := DefaultStakedBalance
	bigDefaultStakedBalance, err := types.ParseUint256orHex(&val)

	if err != nil {
		return nil, fmt.Errorf("unable to generate DefaultStatkedBalance, %w", err)
	}

	if params.Owner == types.ZeroAddress {
		return nil, errors.New("contract owner should not be empty")
	}

	// Generate the empty account storage map
	storageMap := make(map[types.Hash]types.Hash)
	bigOne := big.NewInt(1)
	bigTrueValue := big.NewInt(1)
	stakedAmount := big.NewInt(0)

	for indx, validator := range params.Validators {
		// Update the total staked amount
		stakedAmount.Add(stakedAmount, bigDefaultStakedBalance)

		// Get the storage indexes
		storageIndexes := getStorageIndexes(validator, int64(indx))

		// Set the value for the owner
		storageMap[types.BytesToHash(storageIndexes.OwnerIndex)] =
			types.BytesToHash(params.Owner.Bytes())

		// Set the value for the threshold
		storageMap[types.BytesToHash(storageIndexes.ThresholdIndex)] =
			types.BytesToHash(bigDefaultStakedBalance.Bytes())

		// Set the value for the owner
		storageMap[types.BytesToHash(storageIndexes.MinimumIndex)] =
			types.BytesToHash(bigOne.Bytes())

		// Set the value for the validators array
		storageMap[types.BytesToHash(storageIndexes.ValidatorsIndex)] =
			types.BytesToHash(
				validator.Bytes(),
			)

		// Set the value for the address -> validator array index mapping
		storageMap[types.BytesToHash(storageIndexes.AddressToIsValidatorIndex)] =
			types.BytesToHash(bigTrueValue.Bytes())

		// Set the value for the address -> staked amount mapping
		storageMap[types.BytesToHash(storageIndexes.AddressToStakedAmountIndex)] =
			types.StringToHash(hex.EncodeBig(bigDefaultStakedBalance))

		// Set the value for the address -> validator index mapping
		storageMap[types.BytesToHash(storageIndexes.AddressToValidatorIndexIndex)] =
			types.StringToHash(hex.EncodeUint64(uint64(indx)))

		// Set the value for the total staked amount
		storageMap[types.BytesToHash(storageIndexes.StakedAmountIndex)] =
			types.BytesToHash(stakedAmount.Bytes())

		// Set the value for the size of the validators array
		storageMap[types.BytesToHash(storageIndexes.ValidatorsArraySizeIndex)] =
			types.StringToHash(hex.EncodeUint64(uint64(indx + 1)))
	}

	// Save the storage map
	stakingAccount.Storage = storageMap

	// Set the Staking SC balance to numValidators * defaultStakedBalance
	stakingAccount.Balance = stakedAmount

	return stakingAccount, nil
}
