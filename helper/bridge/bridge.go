package bridge

import (
	"fmt"
	"math/big"

	"github.com/dogechain-lab/jury/chain"
	"github.com/dogechain-lab/jury/helper/common"
	"github.com/dogechain-lab/jury/helper/hex"
	"github.com/dogechain-lab/jury/helper/keccak"
	"github.com/dogechain-lab/jury/types"
)

var (
	DefaultThreshold = "100000000000000000000" // 100 wDoge
)

// getAddressMapping returns the key for the SC storage mapping (address => something)
//
// More information:
// https://docs.soliditylang.org/en/latest/internals/layout_in_storage.html
func getAddressMapping(address types.Address, slot int64) []byte {
	bigSlot := big.NewInt(slot)

	finalSlice := append(
		common.PadLeftOrTrim(address.Bytes(), 32),
		common.PadLeftOrTrim(bigSlot.Bytes(), 32)...,
	)
	keccakValue := keccak.Keccak256(nil, finalSlice)

	return keccakValue
}

// getIndexWithOffset is a helper method for adding an offset to the already found keccak hash
func getIndexWithOffset(keccakHash []byte, offset int64) []byte {
	bigOffset := big.NewInt(offset)
	bigKeccak := big.NewInt(0).SetBytes(keccakHash)

	bigKeccak.Add(bigKeccak, bigOffset)

	return bigKeccak.Bytes()
}

// getStorageIndexes is a helper function for getting the correct indexes
// of the storage slots which need to be modified during bootstrap.
//
// It is SC dependant, and based on the SC located at:
// https://github.com/dogechain-lab/jury-contracts/
func getStorageIndexes(address types.Address, index int64) *StorageIndexes {
	storageIndexes := StorageIndexes{}

	// Get the indexes for _owner, _minimumThreshold
	// Index for regular types is calculated as just the regular slot
	storageIndexes.OwnerIndex = big.NewInt(ownerSlot).Bytes()
	storageIndexes.MinimumThresholdIndex = big.NewInt(minimumThresholdSlot).Bytes()

	// Get the indexes for the mappings
	// The index for the mapping is retrieved with:
	// keccak(address . slot)
	// . stands for concatenation (basically appending the bytes)
	storageIndexes.AddressToIsSignerIndex = getAddressMapping(address, addressToIsSignerSlot)
	storageIndexes.AddressToSignerIndexIndex = getAddressMapping(address, addressToSignerIndexSlot)

	// Index for array types is calculated as keccak(slot) + index
	// The slot for the dynamic arrays that's put in the keccak needs to be in hex form (padded 64 chars)
	storageIndexes.SignersIndex = getIndexWithOffset(
		keccak.Keccak256(nil, common.PadLeftOrTrim(big.NewInt(signersSlot).Bytes(), 32)),
		index,
	)

	// For any dynamic array in Solidity, the size of the actual array should be
	// located on slot x
	storageIndexes.SignersArraySizeIndex = []byte{byte(signersSlot)}

	return &storageIndexes
}

// PredeployParams contains the values used to predeploy the Bridge contract
type PredeployParams struct {
	Owner   types.Address
	Signers []types.Address
}

// StorageIndexes is a wrapper for different storage indexes that
// need to be modified
type StorageIndexes struct {
	OwnerIndex                []byte // address
	MinimumThresholdIndex     []byte // uint256
	SignersIndex              []byte // []address
	SignersArraySizeIndex     []byte // []address size
	AddressToIsSignerIndex    []byte // mapping(address => bool)
	AddressToSignerIndexIndex []byte // mapping(address => uint256)
}

// Slot definitions for SC storage
var (
	ownerSlot                = int64(0) // Slot 0
	minimumThresholdSlot     = int64(1) // Slot 1
	signersSlot              = int64(2)
	addressToIsSignerSlot    = int64(3)
	addressToSignerIndexSlot = int64(4)
)

const (
	//nolint: lll
	BridgeSCBytecode = "0x6080604052600436106100e85760003560e01c806367058d291161008a57806394cf795e1161005957806394cf795e146102ad578063cd86a6cb146102d8578063eb12d61e14610315578063f2fde38b1461033e576100e8565b806367058d2914610205578063715018a61461022e5780637df73e27146102455780638da5cb5b14610282576100e8565b806331fb67c2116100c657806331fb67c21461016c57806334fcf437146101885780634cde3a53146101b157806354c4633e146101dc576100e8565b806318160ddd146100ed57806319e5c034146101185780632c4e722e14610141575b600080fd5b3480156100f957600080fd5b50610102610367565b60405161010f9190611a64565b60405180910390f35b34801561012457600080fd5b5061013f600480360381019061013a9190611582565b610371565b005b34801561014d57600080fd5b506101566106e3565b6040516101639190611a64565b60405180910390f35b61018660048036038101906101819190611621565b6106ed565b005b34801561019457600080fd5b506101af60048036038101906101aa919061166a565b6107e6565b005b3480156101bd57600080fd5b506101c66108cb565b6040516101d39190611a64565b60405180910390f35b3480156101e857600080fd5b5061020360048036038101906101fe9190611555565b6108d5565b005b34801561021157600080fd5b5061022c6004803603810190610227919061166a565b610a1c565b005b34801561023a57600080fd5b50610243610b01565b005b34801561025157600080fd5b5061026c60048036038101906102679190611555565b610b9b565b6040516102799190611970565b60405180910390f35b34801561028e57600080fd5b50610297610bf1565b6040516102a49190611933565b60405180910390f35b3480156102b957600080fd5b506102c2610c1a565b6040516102cf919061194e565b60405180910390f35b3480156102e457600080fd5b506102ff60048036038101906102fa9190611582565b610ca8565b60405161030c919061194e565b60405180910390f35b34801561032157600080fd5b5061033c60048036038101906103379190611555565b610d81565b005b34801561034a57600080fd5b5061036560048036038101906103609190611555565b610fc2565b005b6000600654905090565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166103fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f490611a44565b60405180910390fd5b60008484848460405160200161041694939291906118ed565b60405160208183030381529060405280519060200120905060006005600083815260200190815260200160002090508060040160149054906101000a900460ff16156104635750506106dd565b60005b8160000180549050811015610504573373ffffffffffffffffffffffffffffffffffffffff168260000182815481106104a2576104a1611e7f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156104f1575050506106dd565b80806104fc90611d4c565b915050610466565b50858160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084816001018190555082816003019080519060200190610569929190611418565b5083816002019080519060200190610582929190611418565b5080600001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600280805490506105f99190611ba0565b816000018054905011801561061d57508060040160149054906101000a900460ff16155b156106da5760018160040160146101000a81548160ff021916908315150217905550610654856006546110cc90919063ffffffff16565b60068190555080600101548160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fbceab28ca952a9177ce3716580d6c8c2d677fdf721b944e57a5e7322622ffdc983600201846003016040516106d19291906119ad565b60405180910390a35b50505b50505050565b6000600754905090565b600154341015610732576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072990611a24565b60405180910390fd5b600061075d61271061074f600754346110e290919063ffffffff16565b6110f890919063ffffffff16565b90506000610774823461110e90919063ffffffff16565b905061078b8160065461110e90919063ffffffff16565b60068190555081813373ffffffffffffffffffffffffffffffffffffffff167f62116a798bb58cc967874bea4d771de2f9aeec6c64189ff2e5a551072f3106f9866040516107d9919061198b565b60405180910390a4505050565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610874576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086b90611a04565b60405180910390fd5b600060075490508160078190555081813373ffffffffffffffffffffffffffffffffffffffff167f9e31cca092b9e764bfc6b1b552d55ad4b035e609318fecc26cd38b34e8dd08bb60405160405180910390a45050565b6000600154905090565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610963576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095a90611a04565b60405180910390fd5b600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610a19576109be81611124565b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f013d6b862b532c38b01efed34c94d382085143963c63c76e87c24d4b7a37f98e60405160405180910390a35b50565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610aaa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa190611a04565b60405180910390fd5b600060015490508160018190555081813373ffffffffffffffffffffffffffffffffffffffff167f480e8e496f7aff74972b0902e678fd5b564e4fb6527f0418da8a2c1aa628002260405160405180910390a45050565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610b8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8690611a04565b60405180910390fd5b610b996000611354565b565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606002805480602002602001604051908101604052809291908181526020018280548015610c9e57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610c54575b5050505050905090565b6060600085858585604051602001610cc394939291906118ed565b60405160208183030381529060405280519060200120905060056000828152602001908152602001600020600001805480602002602001604051908101604052809291908181526020018280548015610d7157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610d27575b5050505050915050949350505050565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610e0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0690611a04565b60405180910390fd5b600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610fbf57600280549050600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506002819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8064a302796c89446a96d63470b5b036212da26bd2debe5bec73e0170a9a5e8360405160405180910390a35b50565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611050576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104790611a04565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156110c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110b7906119e4565b60405180910390fd5b6110c981611354565b50565b600081836110da9190611b4a565b905092915050565b600081836110f09190611bd1565b905092915050565b600081836111069190611ba0565b905092915050565b6000818361111c9190611c2b565b905092915050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600160028054905061117c9190611c2b565b905080821461126b5760006002828154811061119b5761119a611e7f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600284815481106111dd576111dc611e7f565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b6000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600280548061131a57611319611e50565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b82805461142490611ce9565b90600052602060002090601f016020900481019282611446576000855561148d565b82601f1061145f57805160ff191683800117855561148d565b8280016001018555821561148d579182015b8281111561148c578251825591602001919060010190611471565b5b50905061149a919061149e565b5090565b5b808211156114b757600081600090555060010161149f565b5090565b60006114ce6114c984611aa4565b611a7f565b9050828152602081018484840111156114ea576114e9611ee2565b5b6114f5848285611ca7565b509392505050565b60008135905061150c81611fd9565b92915050565b600082601f83011261152757611526611edd565b5b81356115378482602086016114bb565b91505092915050565b60008135905061154f81611ff0565b92915050565b60006020828403121561156b5761156a611eec565b5b6000611579848285016114fd565b91505092915050565b6000806000806080858703121561159c5761159b611eec565b5b60006115aa878288016114fd565b94505060206115bb87828801611540565b935050604085013567ffffffffffffffff8111156115dc576115db611ee7565b5b6115e887828801611512565b925050606085013567ffffffffffffffff81111561160957611608611ee7565b5b61161587828801611512565b91505092959194509250565b60006020828403121561163757611636611eec565b5b600082013567ffffffffffffffff81111561165557611654611ee7565b5b61166184828501611512565b91505092915050565b6000602082840312156116805761167f611eec565b5b600061168e84828501611540565b91505092915050565b60006116a383836116af565b60208301905092915050565b6116b881611c5f565b82525050565b6116c781611c5f565b82525050565b6116de6116d982611c5f565b611d95565b82525050565b60006116ef82611afa565b6116f98185611b1d565b935061170483611ad5565b8060005b8381101561173557815161171c8882611697565b975061172783611b10565b925050600181019050611708565b5085935050505092915050565b61174b81611c71565b82525050565b600061175c82611b05565b6117668185611b2e565b9350611776818560208601611cb6565b61177f81611ef1565b840191505092915050565b600061179582611b05565b61179f8185611b3f565b93506117af818560208601611cb6565b80840191505092915050565b600081546117c881611ce9565b6117d28186611b2e565b945060018216600081146117ed57600181146117ff57611832565b60ff1983168652602086019350611832565b61180885611ae5565b60005b8381101561182a5781548189015260018201915060208101905061180b565b808801955050505b50505092915050565b6000611848602683611b2e565b915061185382611f0f565b604082019050919050565b600061186b601c83611b2e565b915061187682611f5e565b602082019050919050565b600061188e600683611b2e565b915061189982611f87565b602082019050919050565b60006118b1601d83611b2e565b91506118bc82611fb0565b602082019050919050565b6118d081611c9d565b82525050565b6118e76118e282611c9d565b611db9565b82525050565b60006118f982876116cd565b60148201915061190982866118d6565b602082019150611919828561178a565b9150611925828461178a565b915081905095945050505050565b600060208201905061194860008301846116be565b92915050565b6000602082019050818103600083015261196881846116e4565b905092915050565b60006020820190506119856000830184611742565b92915050565b600060208201905081810360008301526119a58184611751565b905092915050565b600060408201905081810360008301526119c781856117bb565b905081810360208301526119db81846117bb565b90509392505050565b600060208201905081810360008301526119fd8161183b565b9050919050565b60006020820190508181036000830152611a1d8161185e565b9050919050565b60006020820190508181036000830152611a3d81611881565b9050919050565b60006020820190508181036000830152611a5d816118a4565b9050919050565b6000602082019050611a7960008301846118c7565b92915050565b6000611a89611a9a565b9050611a958282611d1b565b919050565b6000604051905090565b600067ffffffffffffffff821115611abf57611abe611eae565b5b611ac882611ef1565b9050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000611b5582611c9d565b9150611b6083611c9d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611b9557611b94611dc3565b5b828201905092915050565b6000611bab82611c9d565b9150611bb683611c9d565b925082611bc657611bc5611df2565b5b828204905092915050565b6000611bdc82611c9d565b9150611be783611c9d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611c2057611c1f611dc3565b5b828202905092915050565b6000611c3682611c9d565b9150611c4183611c9d565b925082821015611c5457611c53611dc3565b5b828203905092915050565b6000611c6a82611c7d565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015611cd4578082015181840152602081019050611cb9565b83811115611ce3576000848401525b50505050565b60006002820490506001821680611d0157607f821691505b60208210811415611d1557611d14611e21565b5b50919050565b611d2482611ef1565b810181811067ffffffffffffffff82111715611d4357611d42611eae565b5b80604052505050565b6000611d5782611c9d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611d8a57611d89611dc3565b5b600182019050919050565b6000611da082611da7565b9050919050565b6000611db282611f02565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f6e6c79206f776e65722063616e2063616c6c2066756e6374696f6e00000000600082015250565b7f466f726269640000000000000000000000000000000000000000000000000000600082015250565b7f4f6e6c79207369676e65722063616e2063616c6c2066756e6374696f6e000000600082015250565b611fe281611c5f565b8114611fed57600080fd5b50565b611ff981611c9d565b811461200457600080fd5b5056fea2646970667358221220fcc93f1dc0623584bcf8dcc7a7240a462198fe7215d85c6f2bb4dbf349ad0e8f64736f6c63430008060033"
)

// PredeployBridgeSC is a helper method for setting up the bridge smart contract account,
// using the passed in owner and signers as pre-defined accounts.
func PredeployBridgeSC(params PredeployParams) (*chain.GenesisAccount, error) {
	// Set the code for the bridge smart contract
	// Code retrieved from https://github.com/dogechain-lab/jury-contracts
	scHex, _ := hex.DecodeHex(BridgeSCBytecode)
	bridgeAccount := &chain.GenesisAccount{
		Code: scHex,
	}

	// Parse the default threshold value into *big.Int
	bigDefaultThreshold, err := types.ParseUint256orHex(&DefaultThreshold)
	if err != nil {
		return nil, fmt.Errorf("unable to generate bigDefaultThreshold, %w", err)
	}

	// Generate the empty account storage map
	storageMap := make(map[types.Hash]types.Hash)
	bigTrueValue := big.NewInt(1)

	for indx, signer := range params.Signers {
		// Get the storage indexes
		storageIndexes := getStorageIndexes(signer, int64(indx))

		// Set the value for the owner
		storageMap[types.BytesToHash(storageIndexes.OwnerIndex)] =
			types.BytesToHash(params.Owner.Bytes())

		// Set the value for the minimum threshold
		storageMap[types.BytesToHash(storageIndexes.MinimumThresholdIndex)] =
			types.StringToHash(hex.EncodeBig(bigDefaultThreshold))

		// Set the value for the signers array
		storageMap[types.BytesToHash(storageIndexes.SignersIndex)] =
			types.BytesToHash(signer.Bytes())

		// Set the value for the size of the signers array
		storageMap[types.BytesToHash(storageIndexes.SignersArraySizeIndex)] =
			types.StringToHash(hex.EncodeUint64(uint64(indx + 1)))

		// Set the value for the address -> is signer mapping
		storageMap[types.BytesToHash(storageIndexes.AddressToIsSignerIndex)] =
			types.BytesToHash(bigTrueValue.Bytes())

		// Set the value for the address -> signer array index mapping
		storageMap[types.BytesToHash(storageIndexes.AddressToSignerIndexIndex)] =
			types.StringToHash(hex.EncodeUint64(uint64(indx)))
	}

	// Save the storage map
	bridgeAccount.Storage = storageMap

	return bridgeAccount, nil
}
