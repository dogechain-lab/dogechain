package bridge

import (
	"fmt"
	"math/big"

	"github.com/dogechain-lab/jury/chain"
	"github.com/dogechain-lab/jury/helper/common"
	"github.com/dogechain-lab/jury/helper/hex"
	"github.com/dogechain-lab/jury/helper/keccak"
	"github.com/dogechain-lab/jury/types"
)

var (
	DefaultThreshold = "100000000000000000000" // 100 wDoge
)

// getAddressMapping returns the key for the SC storage mapping (address => something)
//
// More information:
// https://docs.soliditylang.org/en/latest/internals/layout_in_storage.html
func getAddressMapping(address types.Address, slot int64) []byte {
	bigSlot := big.NewInt(slot)

	finalSlice := append(
		common.PadLeftOrTrim(address.Bytes(), 32),
		common.PadLeftOrTrim(bigSlot.Bytes(), 32)...,
	)
	keccakValue := keccak.Keccak256(nil, finalSlice)

	return keccakValue
}

// getIndexWithOffset is a helper method for adding an offset to the already found keccak hash
func getIndexWithOffset(keccakHash []byte, offset int64) []byte {
	bigOffset := big.NewInt(offset)
	bigKeccak := big.NewInt(0).SetBytes(keccakHash)

	bigKeccak.Add(bigKeccak, bigOffset)

	return bigKeccak.Bytes()
}

// getStorageIndexes is a helper function for getting the correct indexes
// of the storage slots which need to be modified during bootstrap.
//
// It is SC dependant, and based on the SC located at:
// https://github.com/dogechain-lab/jury-contracts/
func getStorageIndexes(address types.Address, index int64) *StorageIndexes {
	storageIndexes := StorageIndexes{}

	// Get the indexes for _owner, _minimumThreshold
	// Index for regular types is calculated as just the regular slot
	storageIndexes.OwnerIndex = big.NewInt(ownerSlot).Bytes()
	storageIndexes.MinimumThresholdIndex = big.NewInt(minimumThresholdSlot).Bytes()

	// Get the indexes for the mappings
	// The index for the mapping is retrieved with:
	// keccak(address . slot)
	// . stands for concatenation (basically appending the bytes)
	storageIndexes.AddressToIsSignerIndex = getAddressMapping(address, addressToIsSignerSlot)
	storageIndexes.AddressToSignerIndexIndex = getAddressMapping(address, addressToSignerIndexSlot)

	// Index for array types is calculated as keccak(slot) + index
	// The slot for the dynamic arrays that's put in the keccak needs to be in hex form (padded 64 chars)
	storageIndexes.SignersIndex = getIndexWithOffset(
		keccak.Keccak256(nil, common.PadLeftOrTrim(big.NewInt(signersSlot).Bytes(), 32)),
		index,
	)

	// For any dynamic array in Solidity, the size of the actual array should be
	// located on slot x
	storageIndexes.SignersArraySizeIndex = []byte{byte(signersSlot)}

	return &storageIndexes
}

// PredeployParams contains the values used to predeploy the Bridge contract
type PredeployParams struct {
	Owner   types.Address
	Signers []types.Address
}

// StorageIndexes is a wrapper for different storage indexes that
// need to be modified
type StorageIndexes struct {
	OwnerIndex                []byte // address
	MinimumThresholdIndex     []byte // uint256
	SignersIndex              []byte // []address
	SignersArraySizeIndex     []byte // []address size
	AddressToIsSignerIndex    []byte // mapping(address => bool)
	AddressToSignerIndexIndex []byte // mapping(address => uint256)
}

// Slot definitions for SC storage
var (
	ownerSlot                = int64(0) // Slot 0
	minimumThresholdSlot     = int64(1) // Slot 1
	signersSlot              = int64(2)
	addressToIsSignerSlot    = int64(3)
	addressToSignerIndexSlot = int64(4)
)

const (
	//nolint: lll
	BridgeSCBytecode = "0x6080604052600436106100dd5760003560e01c806369fe0e2d1161007f5780638da5cb5b116100595780638da5cb5b1461027757806394cf795e146102a2578063cd86a6cb146102cd578063f2fde38b1461030a576100dd565b806369fe0e2d146101fa578063715018a6146102235780637df73e271461023a576100dd565b806331cb6105116100bb57806331cb61051461016157806331fb67c21461018a5780634cde3a53146101a657806367058d29146101d1576100dd565b806318160ddd146100e257806319e5c0341461010d5780632c4e722e14610136575b600080fd5b3480156100ee57600080fd5b506100f7610333565b60405161010491906118a3565b60405180910390f35b34801561011957600080fd5b50610134600480360381019061012f91906113c1565b61033d565b005b34801561014257600080fd5b5061014b610691565b60405161015891906118a3565b60405180910390f35b34801561016d57600080fd5b5061018860048036038101906101839190611381565b61069b565b005b6101a4600480360381019061019f9190611460565b6108f9565b005b3480156101b257600080fd5b506101bb6109f2565b6040516101c891906118a3565b60405180910390f35b3480156101dd57600080fd5b506101f860048036038101906101f391906114a9565b6109fc565b005b34801561020657600080fd5b50610221600480360381019061021c91906114a9565b610a94565b005b34801561022f57600080fd5b50610238610b2c565b005b34801561024657600080fd5b50610261600480360381019061025c9190611354565b610bc6565b60405161026e91906117af565b60405180910390f35b34801561028357600080fd5b5061028c610c1c565b6040516102999190611772565b60405180910390f35b3480156102ae57600080fd5b506102b7610c45565b6040516102c4919061178d565b60405180910390f35b3480156102d957600080fd5b506102f460048036038101906102ef91906113c1565b610cd3565b604051610301919061178d565b60405180910390f35b34801561031657600080fd5b50610331600480360381019061032c9190611354565b610dac565b005b6000600654905090565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166103c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c090611883565b60405180910390fd5b6000848484846040516020016103e2949392919061172c565b604051602081830303815290604052805190602001209050600060056000838152602001908152602001600020905060005b81600001805490508110156104b2573373ffffffffffffffffffffffffffffffffffffffff168260000182815481106104505761044f611cbe565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561049f5750505061068b565b80806104aa90611b8b565b915050610414565b50858160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084816001018190555082816003019080519060200190610517929190611202565b5083816002019080519060200190610530929190611202565b5080600001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600280805490506105a791906119df565b81600001805490501180156105cb57508060040160149054906101000a900460ff16155b156106885760018160040160146101000a81548160ff02191690831515021790555061060285600654610eb690919063ffffffff16565b60068190555080600101548160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fbceab28ca952a9177ce3716580d6c8c2d677fdf721b944e57a5e7322622ffdc9836002018460030160405161067f9291906117ec565b60405180910390a35b50505b50505050565b6000600754905090565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610729576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072090611843565b60405180910390fd5b8080156107805750600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b1561088e57600280549050600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506002829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506108f5565b801580156108e55750600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b156108f4576108f382610ecc565b5b5b5050565b60015434101561093e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093590611863565b60405180910390fd5b610953346006546110fc90919063ffffffff16565b60068190555060006109846127106109766007543461111290919063ffffffff16565b61112890919063ffffffff16565b9050600061099b82346110fc90919063ffffffff16565b905081813373ffffffffffffffffffffffffffffffffffffffff167f62116a798bb58cc967874bea4d771de2f9aeec6c64189ff2e5a551072f3106f9866040516109e591906117ca565b60405180910390a4505050565b6000600154905090565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610a8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8190611843565b60405180910390fd5b8060018190555050565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610b22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1990611843565b60405180910390fd5b8060078190555050565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610bba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb190611843565b60405180910390fd5b610bc4600061113e565b565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606002805480602002602001604051908101604052809291908181526020018280548015610cc957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610c7f575b5050505050905090565b6060600085858585604051602001610cee949392919061172c565b60405160208183030381529060405280519060200120905060056000828152602001908152602001600020600001805480602002602001604051908101604052809291908181526020018280548015610d9c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610d52575b5050505050915050949350505050565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610e3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3190611843565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610eaa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea190611823565b60405180910390fd5b610eb38161113e565b50565b60008183610ec49190611989565b905092915050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060006001600280549050610f249190611a6a565b905080821461101357600060028281548110610f4357610f42611cbe565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508060028481548110610f8557610f84611cbe565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b6000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060028054806110c2576110c1611c8f565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055505050565b6000818361110a9190611a6a565b905092915050565b600081836111209190611a10565b905092915050565b6000818361113691906119df565b905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b82805461120e90611b28565b90600052602060002090601f0160209004810192826112305760008555611277565b82601f1061124957805160ff1916838001178555611277565b82800160010185558215611277579182015b8281111561127657825182559160200191906001019061125b565b5b5090506112849190611288565b5090565b5b808211156112a1576000816000905550600101611289565b5090565b60006112b86112b3846118e3565b6118be565b9050828152602081018484840111156112d4576112d3611d21565b5b6112df848285611ae6565b509392505050565b6000813590506112f681611e18565b92915050565b60008135905061130b81611e2f565b92915050565b600082601f83011261132657611325611d1c565b5b81356113368482602086016112a5565b91505092915050565b60008135905061134e81611e46565b92915050565b60006020828403121561136a57611369611d2b565b5b6000611378848285016112e7565b91505092915050565b6000806040838503121561139857611397611d2b565b5b60006113a6858286016112e7565b92505060206113b7858286016112fc565b9150509250929050565b600080600080608085870312156113db576113da611d2b565b5b60006113e9878288016112e7565b94505060206113fa8782880161133f565b935050604085013567ffffffffffffffff81111561141b5761141a611d26565b5b61142787828801611311565b925050606085013567ffffffffffffffff81111561144857611447611d26565b5b61145487828801611311565b91505092959194509250565b60006020828403121561147657611475611d2b565b5b600082013567ffffffffffffffff81111561149457611493611d26565b5b6114a084828501611311565b91505092915050565b6000602082840312156114bf576114be611d2b565b5b60006114cd8482850161133f565b91505092915050565b60006114e283836114ee565b60208301905092915050565b6114f781611a9e565b82525050565b61150681611a9e565b82525050565b61151d61151882611a9e565b611bd4565b82525050565b600061152e82611939565b611538818561195c565b935061154383611914565b8060005b8381101561157457815161155b88826114d6565b97506115668361194f565b925050600181019050611547565b5085935050505092915050565b61158a81611ab0565b82525050565b600061159b82611944565b6115a5818561196d565b93506115b5818560208601611af5565b6115be81611d30565b840191505092915050565b60006115d482611944565b6115de818561197e565b93506115ee818560208601611af5565b80840191505092915050565b6000815461160781611b28565b611611818661196d565b9450600182166000811461162c576001811461163e57611671565b60ff1983168652602086019350611671565b61164785611924565b60005b838110156116695781548189015260018201915060208101905061164a565b808801955050505b50505092915050565b600061168760268361196d565b915061169282611d4e565b604082019050919050565b60006116aa601c8361196d565b91506116b582611d9d565b602082019050919050565b60006116cd60068361196d565b91506116d882611dc6565b602082019050919050565b60006116f0601d8361196d565b91506116fb82611def565b602082019050919050565b61170f81611adc565b82525050565b61172661172182611adc565b611bf8565b82525050565b6000611738828761150c565b6014820191506117488286611715565b60208201915061175882856115c9565b915061176482846115c9565b915081905095945050505050565b600060208201905061178760008301846114fd565b92915050565b600060208201905081810360008301526117a78184611523565b905092915050565b60006020820190506117c46000830184611581565b92915050565b600060208201905081810360008301526117e48184611590565b905092915050565b6000604082019050818103600083015261180681856115fa565b9050818103602083015261181a81846115fa565b90509392505050565b6000602082019050818103600083015261183c8161167a565b9050919050565b6000602082019050818103600083015261185c8161169d565b9050919050565b6000602082019050818103600083015261187c816116c0565b9050919050565b6000602082019050818103600083015261189c816116e3565b9050919050565b60006020820190506118b86000830184611706565b92915050565b60006118c86118d9565b90506118d48282611b5a565b919050565b6000604051905090565b600067ffffffffffffffff8211156118fe576118fd611ced565b5b61190782611d30565b9050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061199482611adc565b915061199f83611adc565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156119d4576119d3611c02565b5b828201905092915050565b60006119ea82611adc565b91506119f583611adc565b925082611a0557611a04611c31565b5b828204905092915050565b6000611a1b82611adc565b9150611a2683611adc565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611a5f57611a5e611c02565b5b828202905092915050565b6000611a7582611adc565b9150611a8083611adc565b925082821015611a9357611a92611c02565b5b828203905092915050565b6000611aa982611abc565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015611b13578082015181840152602081019050611af8565b83811115611b22576000848401525b50505050565b60006002820490506001821680611b4057607f821691505b60208210811415611b5457611b53611c60565b5b50919050565b611b6382611d30565b810181811067ffffffffffffffff82111715611b8257611b81611ced565b5b80604052505050565b6000611b9682611adc565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611bc957611bc8611c02565b5b600182019050919050565b6000611bdf82611be6565b9050919050565b6000611bf182611d41565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f6e6c79206f776e65722063616e2063616c6c2066756e6374696f6e00000000600082015250565b7f466f726269640000000000000000000000000000000000000000000000000000600082015250565b7f4f6e6c79207369676e65722063616e2063616c6c2066756e6374696f6e000000600082015250565b611e2181611a9e565b8114611e2c57600080fd5b50565b611e3881611ab0565b8114611e4357600080fd5b50565b611e4f81611adc565b8114611e5a57600080fd5b5056fea2646970667358221220f8c143a3747dd01048d8c407a764a7722426bd87c08cc665adffa5f73ba8126e64736f6c63430008060033"
)

// PredeployBridgeSC is a helper method for setting up the bridge smart contract account,
// using the passed in owner and signers as pre-defined accounts.
func PredeployBridgeSC(params PredeployParams) (*chain.GenesisAccount, error) {
	// Set the code for the bridge smart contract
	// Code retrieved from https://github.com/dogechain-lab/jury-contracts
	scHex, _ := hex.DecodeHex(BridgeSCBytecode)
	bridgeAccount := &chain.GenesisAccount{
		Code: scHex,
	}

	// Parse the default threshold value into *big.Int
	bigDefaultThreshold, err := types.ParseUint256orHex(&DefaultThreshold)
	if err != nil {
		return nil, fmt.Errorf("unable to generate bigDefaultThreshold, %w", err)
	}

	// Generate the empty account storage map
	storageMap := make(map[types.Hash]types.Hash)
	bigTrueValue := big.NewInt(1)

	for indx, signer := range params.Signers {
		// Get the storage indexes
		storageIndexes := getStorageIndexes(signer, int64(indx))

		// Set the value for the owner
		storageMap[types.BytesToHash(storageIndexes.OwnerIndex)] =
			types.BytesToHash(params.Owner.Bytes())

		// Set the value for the minimum threshold
		storageMap[types.BytesToHash(storageIndexes.MinimumThresholdIndex)] =
			types.StringToHash(hex.EncodeBig(bigDefaultThreshold))

		// Set the value for the signers array
		storageMap[types.BytesToHash(storageIndexes.SignersIndex)] =
			types.BytesToHash(signer.Bytes())

		// Set the value for the size of the signers array
		storageMap[types.BytesToHash(storageIndexes.SignersArraySizeIndex)] =
			types.StringToHash(hex.EncodeUint64(uint64(indx + 1)))

		// Set the value for the address -> is signer mapping
		storageMap[types.BytesToHash(storageIndexes.AddressToIsSignerIndex)] =
			types.BytesToHash(bigTrueValue.Bytes())

		// Set the value for the address -> signer array index mapping
		storageMap[types.BytesToHash(storageIndexes.AddressToSignerIndexIndex)] =
			types.StringToHash(hex.EncodeUint64(uint64(indx)))
	}

	// Save the storage map
	bridgeAccount.Storage = storageMap

	return bridgeAccount, nil
}
