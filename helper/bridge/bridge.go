package bridge

import (
	"fmt"
	"math/big"

	"github.com/dogechain-lab/jury/chain"
	"github.com/dogechain-lab/jury/helper/common"
	"github.com/dogechain-lab/jury/helper/hex"
	"github.com/dogechain-lab/jury/helper/keccak"
	"github.com/dogechain-lab/jury/types"
)

var (
	DefaultThreshold = "100000000000000000000" // 100 wDoge
)

// getAddressMapping returns the key for the SC storage mapping (address => something)
//
// More information:
// https://docs.soliditylang.org/en/latest/internals/layout_in_storage.html
func getAddressMapping(address types.Address, slot int64) []byte {
	bigSlot := big.NewInt(slot)

	finalSlice := append(
		common.PadLeftOrTrim(address.Bytes(), 32),
		common.PadLeftOrTrim(bigSlot.Bytes(), 32)...,
	)
	keccakValue := keccak.Keccak256(nil, finalSlice)

	return keccakValue
}

// getIndexWithOffset is a helper method for adding an offset to the already found keccak hash
func getIndexWithOffset(keccakHash []byte, offset int64) []byte {
	bigOffset := big.NewInt(offset)
	bigKeccak := big.NewInt(0).SetBytes(keccakHash)

	bigKeccak.Add(bigKeccak, bigOffset)

	return bigKeccak.Bytes()
}

// getStorageIndexes is a helper function for getting the correct indexes
// of the storage slots which need to be modified during bootstrap.
//
// It is SC dependant, and based on the SC located at:
// https://github.com/dogechain-lab/jury-contracts/
func getStorageIndexes(address types.Address, index int64) *StorageIndexes {
	storageIndexes := StorageIndexes{}

	// Get the indexes for _owner, _minimumThreshold
	// Index for regular types is calculated as just the regular slot
	storageIndexes.OwnerIndex = big.NewInt(ownerSlot).Bytes()
	storageIndexes.MinimumThresholdIndex = big.NewInt(minimumThresholdSlot).Bytes()

	// Get the indexes for the mappings
	// The index for the mapping is retrieved with:
	// keccak(address . slot)
	// . stands for concatenation (basically appending the bytes)
	storageIndexes.AddressToIsSignerIndex = getAddressMapping(address, addressToIsSignerSlot)
	storageIndexes.AddressToSignerIndexIndex = getAddressMapping(address, addressToSignerIndexSlot)

	// Index for array types is calculated as keccak(slot) + index
	// The slot for the dynamic arrays that's put in the keccak needs to be in hex form (padded 64 chars)
	storageIndexes.SignersIndex = getIndexWithOffset(
		keccak.Keccak256(nil, common.PadLeftOrTrim(big.NewInt(signersSlot).Bytes(), 32)),
		index,
	)

	// For any dynamic array in Solidity, the size of the actual array should be
	// located on slot x
	storageIndexes.SignersArraySizeIndex = []byte{byte(signersSlot)}

	return &storageIndexes
}

// PredeployParams contains the values used to predeploy the Bridge contract
type PredeployParams struct {
	Owner   types.Address
	Signers []types.Address
}

// StorageIndexes is a wrapper for different storage indexes that
// need to be modified
type StorageIndexes struct {
	OwnerIndex                []byte // address
	MinimumThresholdIndex     []byte // uint256
	SignersIndex              []byte // []address
	SignersArraySizeIndex     []byte // []address size
	AddressToIsSignerIndex    []byte // mapping(address => bool)
	AddressToSignerIndexIndex []byte // mapping(address => uint256)
}

// Slot definitions for SC storage
var (
	ownerSlot                = int64(0) // Slot 0
	minimumThresholdSlot     = int64(1) // Slot 1
	signersSlot              = int64(2)
	addressToIsSignerSlot    = int64(3)
	addressToSignerIndexSlot = int64(4)
)

const (
	//nolint: lll
	BridgeSCBytecode = "0x6080604052600436106100f35760003560e01c806369fe0e2d1161008a57806394cf795e1161005957806394cf795e146102f55780639c3f1e9014610320578063cd86a6cb14610361578063f2fde38b1461039e576100f3565b806369fe0e2d1461024d578063715018a6146102765780637df73e271461028d5780638da5cb5b146102ca576100f3565b806331fb67c2116100c657806331fb67c2146101a05780633e4ae210146101bc5780634cde3a53146101f957806367058d2914610224576100f3565b806318160ddd146100f857806319e5c034146101235780632c4e722e1461014c57806331cb610514610177575b600080fd5b34801561010457600080fd5b5061010d6103c7565b60405161011a9190611d8d565b60405180910390f35b34801561012f57600080fd5b5061014a600480360381019061014591906117f8565b6103d1565b005b34801561015857600080fd5b50610161610725565b60405161016e9190611d8d565b60405180910390f35b34801561018357600080fd5b5061019e600480360381019061019991906117b8565b61072f565b005b6101ba60048036038101906101b591906118c4565b61098d565b005b3480156101c857600080fd5b506101e360048036038101906101de919061190d565b610a86565b6040516101f09190611c1c565b60405180910390f35b34801561020557600080fd5b5061020e610ac5565b60405161021b9190611d8d565b60405180910390f35b34801561023057600080fd5b5061024b6004803603810190610246919061190d565b610acf565b005b34801561025957600080fd5b50610274600480360381019061026f919061190d565b610b67565b005b34801561028257600080fd5b5061028b610bff565b005b34801561029957600080fd5b506102b460048036038101906102af919061178b565b610c99565b6040516102c19190611c59565b60405180910390f35b3480156102d657600080fd5b506102df610cef565b6040516102ec9190611c1c565b60405180910390f35b34801561030157600080fd5b5061030a610d18565b6040516103179190611c37565b60405180910390f35b34801561032c57600080fd5b5061034760048036038101906103429190611897565b610da6565b604051610358959493929190611da8565b60405180910390f35b34801561036d57600080fd5b50610388600480360381019061038391906117f8565b610f19565b6040516103959190611c37565b60405180910390f35b3480156103aa57600080fd5b506103c560048036038101906103c0919061178b565b610ff2565b005b6000600654905090565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661045d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045490611d6d565b60405180910390fd5b6000848484846040516020016104769493929190611bd6565b604051602081830303815290604052805190602001209050600060056000838152602001908152602001600020905060005b8160000180549050811015610546573373ffffffffffffffffffffffffffffffffffffffff168260000182815481106104e4576104e3612213565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156105335750505061071f565b808061053e906120e0565b9150506104a8565b50858160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550848160010181905550828160030190805190602001906105ab929190611624565b50838160020190805190602001906105c4929190611624565b5080600001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506002808054905061063b9190611f2a565b816000018054905011801561065f57508060040160149054906101000a900460ff16155b1561071c5760018160040160146101000a81548160ff021916908315150217905550610696856006546110fc90919063ffffffff16565b60068190555080600101548160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fbceab28ca952a9177ce3716580d6c8c2d677fdf721b944e57a5e7322622ffdc98360020184600301604051610713929190611c96565b60405180910390a35b50505b50505050565b6000600754905090565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146107bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b490611d0d565b60405180910390fd5b8080156108145750600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b1561092257600280549050600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506002829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610989565b801580156109795750600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b15610988576109878261115a565b5b5b5050565b6001543410156109d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c990611d2d565b60405180910390fd5b6109e73460065461138a90919063ffffffff16565b6006819055506000610a18612710610a0a600754346113d490919063ffffffff16565b61144f90919063ffffffff16565b90506000610a2f823461138a90919063ffffffff16565b905081813373ffffffffffffffffffffffffffffffffffffffff167f62116a798bb58cc967874bea4d771de2f9aeec6c64189ff2e5a551072f3106f986604051610a799190611c74565b60405180910390a4505050565b60028181548110610a9657600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600154905090565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610b5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5490611d0d565b60405180910390fd5b8060018190555050565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610bf5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bec90611d0d565b60405180910390fd5b8060078190555050565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610c8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8490611d0d565b60405180910390fd5b610c976000611499565b565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606002805480602002602001604051908101604052809291908181526020018280548015610d9c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610d52575b5050505050905090565b6005602052806000526040600020600091509050806001015490806002018054610dcf9061207d565b80601f0160208091040260200160405190810160405280929190818152602001828054610dfb9061207d565b8015610e485780601f10610e1d57610100808354040283529160200191610e48565b820191906000526020600020905b815481529060010190602001808311610e2b57829003601f168201915b505050505090806003018054610e5d9061207d565b80601f0160208091040260200160405190810160405280929190818152602001828054610e899061207d565b8015610ed65780601f10610eab57610100808354040283529160200191610ed6565b820191906000526020600020905b815481529060010190602001808311610eb957829003601f168201915b5050505050908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160149054906101000a900460ff16905085565b6060600085858585604051602001610f349493929190611bd6565b60405160208183030381529060405280519060200120905060056000828152602001908152602001600020600001805480602002602001604051908101604052809291908181526020018280548015610fe257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610f98575b5050505050915050949350505050565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611080576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107790611d0d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156110f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e790611ccd565b60405180910390fd5b6110f981611499565b50565b600080828461110b9190611ed4565b905083811015611150576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114790611ced565b60405180910390fd5b8091505092915050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600060016002805490506111b29190611fb5565b90508082146112a1576000600282815481106111d1576111d0612213565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050806002848154811061121357611212612213565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b6000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060028054806113505761134f6121e4565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055505050565b60006113cc83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061155d565b905092915050565b6000808314156113e75760009050611449565b600082846113f59190611f5b565b90508284826114049190611f2a565b14611444576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161143b90611d4d565b60405180910390fd5b809150505b92915050565b600061149183836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506115c1565b905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008383111582906115a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159c9190611c74565b60405180910390fd5b50600083856115b49190611fb5565b9050809150509392505050565b60008083118290611608576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ff9190611c74565b60405180910390fd5b50600083856116179190611f2a565b9050809150509392505050565b8280546116309061207d565b90600052602060002090601f0160209004810192826116525760008555611699565b82601f1061166b57805160ff1916838001178555611699565b82800160010185558215611699579182015b8281111561169857825182559160200191906001019061167d565b5b5090506116a691906116aa565b5090565b5b808211156116c35760008160009055506001016116ab565b5090565b60006116da6116d584611e2e565b611e09565b9050828152602081018484840111156116f6576116f5612276565b5b61170184828561203b565b509392505050565b600081359050611718816123e5565b92915050565b60008135905061172d816123fc565b92915050565b60008135905061174281612413565b92915050565b600082601f83011261175d5761175c612271565b5b813561176d8482602086016116c7565b91505092915050565b6000813590506117858161242a565b92915050565b6000602082840312156117a1576117a0612280565b5b60006117af84828501611709565b91505092915050565b600080604083850312156117cf576117ce612280565b5b60006117dd85828601611709565b92505060206117ee8582860161171e565b9150509250929050565b6000806000806080858703121561181257611811612280565b5b600061182087828801611709565b945050602061183187828801611776565b935050604085013567ffffffffffffffff8111156118525761185161227b565b5b61185e87828801611748565b925050606085013567ffffffffffffffff81111561187f5761187e61227b565b5b61188b87828801611748565b91505092959194509250565b6000602082840312156118ad576118ac612280565b5b60006118bb84828501611733565b91505092915050565b6000602082840312156118da576118d9612280565b5b600082013567ffffffffffffffff8111156118f8576118f761227b565b5b61190484828501611748565b91505092915050565b60006020828403121561192357611922612280565b5b600061193184828501611776565b91505092915050565b60006119468383611952565b60208301905092915050565b61195b81611fe9565b82525050565b61196a81611fe9565b82525050565b61198161197c82611fe9565b612129565b82525050565b600061199282611e84565b61199c8185611ea7565b93506119a783611e5f565b8060005b838110156119d85781516119bf888261193a565b97506119ca83611e9a565b9250506001810190506119ab565b5085935050505092915050565b6119ee81611ffb565b82525050565b60006119ff82611e8f565b611a098185611eb8565b9350611a1981856020860161204a565b611a2281612285565b840191505092915050565b6000611a3882611e8f565b611a428185611ec9565b9350611a5281856020860161204a565b80840191505092915050565b60008154611a6b8161207d565b611a758186611eb8565b94506001821660008114611a905760018114611aa257611ad5565b60ff1983168652602086019350611ad5565b611aab85611e6f565b60005b83811015611acd57815481890152600182019150602081019050611aae565b808801955050505b50505092915050565b6000611aeb602683611eb8565b9150611af6826122a3565b604082019050919050565b6000611b0e601b83611eb8565b9150611b19826122f2565b602082019050919050565b6000611b31601c83611eb8565b9150611b3c8261231b565b602082019050919050565b6000611b54600683611eb8565b9150611b5f82612344565b602082019050919050565b6000611b77602183611eb8565b9150611b828261236d565b604082019050919050565b6000611b9a601d83611eb8565b9150611ba5826123bc565b602082019050919050565b611bb981612031565b82525050565b611bd0611bcb82612031565b61214d565b82525050565b6000611be28287611970565b601482019150611bf28286611bbf565b602082019150611c028285611a2d565b9150611c0e8284611a2d565b915081905095945050505050565b6000602082019050611c316000830184611961565b92915050565b60006020820190508181036000830152611c518184611987565b905092915050565b6000602082019050611c6e60008301846119e5565b92915050565b60006020820190508181036000830152611c8e81846119f4565b905092915050565b60006040820190508181036000830152611cb08185611a5e565b90508181036020830152611cc48184611a5e565b90509392505050565b60006020820190508181036000830152611ce681611ade565b9050919050565b60006020820190508181036000830152611d0681611b01565b9050919050565b60006020820190508181036000830152611d2681611b24565b9050919050565b60006020820190508181036000830152611d4681611b47565b9050919050565b60006020820190508181036000830152611d6681611b6a565b9050919050565b60006020820190508181036000830152611d8681611b8d565b9050919050565b6000602082019050611da26000830184611bb0565b92915050565b600060a082019050611dbd6000830188611bb0565b8181036020830152611dcf81876119f4565b90508181036040830152611de381866119f4565b9050611df26060830185611961565b611dff60808301846119e5565b9695505050505050565b6000611e13611e24565b9050611e1f82826120af565b919050565b6000604051905090565b600067ffffffffffffffff821115611e4957611e48612242565b5b611e5282612285565b9050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000611edf82612031565b9150611eea83612031565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611f1f57611f1e612157565b5b828201905092915050565b6000611f3582612031565b9150611f4083612031565b925082611f5057611f4f612186565b5b828204905092915050565b6000611f6682612031565b9150611f7183612031565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611faa57611fa9612157565b5b828202905092915050565b6000611fc082612031565b9150611fcb83612031565b925082821015611fde57611fdd612157565b5b828203905092915050565b6000611ff482612011565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561206857808201518184015260208101905061204d565b83811115612077576000848401525b50505050565b6000600282049050600182168061209557607f821691505b602082108114156120a9576120a86121b5565b5b50919050565b6120b882612285565b810181811067ffffffffffffffff821117156120d7576120d6612242565b5b80604052505050565b60006120eb82612031565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561211e5761211d612157565b5b600182019050919050565b60006121348261213b565b9050919050565b600061214682612296565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000600082015250565b7f4f6e6c79206f776e65722063616e2063616c6c2066756e6374696f6e00000000600082015250565b7f466f726269640000000000000000000000000000000000000000000000000000600082015250565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008201527f7700000000000000000000000000000000000000000000000000000000000000602082015250565b7f4f6e6c79207369676e65722063616e2063616c6c2066756e6374696f6e000000600082015250565b6123ee81611fe9565b81146123f957600080fd5b50565b61240581611ffb565b811461241057600080fd5b50565b61241c81612007565b811461242757600080fd5b50565b61243381612031565b811461243e57600080fd5b5056fea26469706673582212206e254bdb9cdfa52107bd41c433569f5f1886644b1ba51175d5b30dcc961f15e664736f6c63430008060033"
)

// PredeployBridgeSC is a helper method for setting up the bridge smart contract account,
// using the passed in owner and signers as pre-defined accounts.
func PredeployBridgeSC(params PredeployParams) (*chain.GenesisAccount, error) {
	// Set the code for the bridge smart contract
	// Code retrieved from https://github.com/dogechain-lab/jury-contracts
	scHex, _ := hex.DecodeHex(BridgeSCBytecode)
	bridgeAccount := &chain.GenesisAccount{
		Code: scHex,
	}

	// Parse the default threshold value into *big.Int
	bigDefaultThreshold, err := types.ParseUint256orHex(&DefaultThreshold)
	if err != nil {
		return nil, fmt.Errorf("unable to generate bigDefaultThreshold, %w", err)
	}

	// Generate the empty account storage map
	storageMap := make(map[types.Hash]types.Hash)
	bigTrueValue := big.NewInt(1)

	for indx, signer := range params.Signers {
		// Get the storage indexes
		storageIndexes := getStorageIndexes(signer, int64(indx))

		// Set the value for the owner
		storageMap[types.BytesToHash(storageIndexes.OwnerIndex)] =
			types.BytesToHash(params.Owner.Bytes())

		// Set the value for the minimum threshold
		storageMap[types.BytesToHash(storageIndexes.MinimumThresholdIndex)] =
			types.StringToHash(hex.EncodeBig(bigDefaultThreshold))

		// Set the value for the signers array
		storageMap[types.BytesToHash(storageIndexes.SignersIndex)] =
			types.BytesToHash(signer.Bytes())

		// Set the value for the size of the signers array
		storageMap[types.BytesToHash(storageIndexes.SignersArraySizeIndex)] =
			types.StringToHash(hex.EncodeUint64(uint64(indx + 1)))

		// Set the value for the address -> is signer mapping
		storageMap[types.BytesToHash(storageIndexes.AddressToIsSignerIndex)] =
			types.BytesToHash(bigTrueValue.Bytes())

		// Set the value for the address -> signer array index mapping
		storageMap[types.BytesToHash(storageIndexes.AddressToSignerIndexIndex)] =
			types.StringToHash(hex.EncodeUint64(uint64(indx)))
	}

	// Save the storage map
	bridgeAccount.Storage = storageMap

	return bridgeAccount, nil
}
