package validatorset

import (
	"errors"
	"math/big"

	"github.com/dogechain-lab/dogechain/chain"
	"github.com/dogechain-lab/dogechain/helper/common"
	"github.com/dogechain-lab/dogechain/helper/hex"
	"github.com/dogechain-lab/dogechain/helper/keccak"
	"github.com/dogechain-lab/dogechain/types"
)

// getAddressMapping returns the key for the SC storage mapping (address => something)
//
// More information:
// https://docs.soliditylang.org/en/latest/internals/layout_in_storage.html
func getAddressMapping(address types.Address, slot int64) []byte {
	bigSlot := big.NewInt(slot)

	finalSlice := append(
		common.PadLeftOrTrim(address.Bytes(), 32),
		common.PadLeftOrTrim(bigSlot.Bytes(), 32)...,
	)
	keccakValue := keccak.Keccak256(nil, finalSlice)

	return keccakValue
}

// getIndexWithOffset is a helper method for adding an offset to the already found keccak hash
func getIndexWithOffset(keccakHash []byte, offset int64) []byte {
	bigOffset := big.NewInt(offset)
	bigKeccak := big.NewInt(0).SetBytes(keccakHash)

	bigKeccak.Add(bigKeccak, bigOffset)

	return bigKeccak.Bytes()
}

// getStorageIndexes is a helper function for getting the correct indexes
// of the storage slots which need to be modified during bootstrap.
//
// It is SC dependant, and based on the SC located at:
// https://github.com/dogechain-lab/dogechain-contracts
func getStorageIndexes(address types.Address, index int64) *StorageIndexes {
	storageIndexes := StorageIndexes{}

	// Get the indexes for the mappings
	// The index for the mapping is retrieved with:
	// keccak(address . slot)
	// . stands for concatenation (basically appending the bytes)
	storageIndexes.AddressToIsValidatorIndex = getAddressMapping(address, addressToIsValidatorSlot)
	storageIndexes.AddressToStakedAmountIndex = getAddressMapping(address, addressToStakedAmountSlot)
	storageIndexes.AddressToValidatorIndexIndex = getAddressMapping(address, addressToValidatorIndexSlot)

	// Get the indexes for _owner, _validators, _stakedAmount, etc
	// Index for regular types is calculated as just the regular slot
	storageIndexes.OwnerIndex = big.NewInt(ownerSlot).Bytes()
	storageIndexes.ThresholdIndex = big.NewInt(thresholdSlot).Bytes()
	storageIndexes.MinimumIndex = big.NewInt(minimumSlot).Bytes()
	storageIndexes.StakedAmountIndex = big.NewInt(stakedAmountSlot).Bytes()

	// Index for array types is calculated as keccak(slot) + index
	// The slot for the dynamic arrays that's put in the keccak needs to be in hex form (padded 64 chars)
	storageIndexes.ValidatorsIndex = getIndexWithOffset(
		keccak.Keccak256(nil, common.PadLeftOrTrim(big.NewInt(validatorsSlot).Bytes(), 32)),
		index,
	)

	// For any dynamic array in Solidity, the size of the actual array should be
	// located on slot x
	storageIndexes.ValidatorsArraySizeIndex = []byte{byte(validatorsSlot)}

	return &storageIndexes
}

// PredeployParams contains the values used to predeploy the PoS staking contract
type PredeployParams struct {
	Owner      types.Address
	Validators []types.Address
}

// StorageIndexes is a wrapper for different storage indexes that
// need to be modified
type StorageIndexes struct {
	OwnerIndex                   []byte // address
	ThresholdIndex               []byte // uint256
	MinimumIndex                 []byte // uint256
	ValidatorsIndex              []byte // []address
	ValidatorsArraySizeIndex     []byte // []address size
	AddressToIsValidatorIndex    []byte // mapping(address => bool)
	AddressToStakedAmountIndex   []byte // mapping(address => uint256)
	AddressToValidatorIndexIndex []byte // mapping(address => uint256)
	StakedAmountIndex            []byte // uint256
}

// Slot definitions for SC storage
const (
	ownerSlot = int64(iota) // Slot 0
	thresholdSlot
	minimumSlot
	validatorsSlot
	addressToIsValidatorSlot
	addressToStakedAmountSlot
	addressToValidatorIndexSlot
	stakedAmountSlot
)

const (
	DefaultStakedBalance = "0x84595161401484A000000" // 10_000_000 DC
	//nolint: lll
	StakingSCBytecode = "0x608060405234801561001057600080fd5b50600436106101165760003560e01c80638da5cb5b116100a2578063ca1e781911610071578063ca1e781914610281578063d0a5e6ce1461029f578063f2fde38b146102bb578063f90ecacc146102d7578063facd743b1461030757610116565b80638da5cb5b1461020f578063960bfe041461022d5780639cbfc76514610249578063a694fc3a1461026557610116565b8063373d6132116100e9578063373d61321461018f57806342cde4e8146101ad5780634d238c8e146101cb57806352d6804d146101e7578063715018a61461020557610116565b80630c340a241461011b5780632367f6b5146101395780632def6620146101695780633209e9e614610173575b600080fd5b610123610337565b604051610130919061191f565b60405180910390f35b610153600480360381019061014e91906116ce565b610361565b6040516101609190611ad7565b60405180910390f35b6101716103aa565b005b61018d60048036038101906101889190611728565b61068c565b005b610197610771565b6040516101a49190611ad7565b60405180910390f35b6101b561077b565b6040516101c29190611ad7565b60405180910390f35b6101e560048036038101906101e091906116ce565b610785565b005b6101ef6109f8565b6040516101fc9190611ad7565b60405180910390f35b61020d610a02565b005b610217610a9c565b604051610224919061191f565b60405180910390f35b61024760048036038101906102429190611728565b610ac5565b005b610263600480360381019061025e91906116ce565b610baa565b005b61027f600480360381019061027a9190611728565b610ce7565b005b610289610f32565b604051610296919061199a565b60405180910390f35b6102b960048036038101906102b491906116ce565b610fc0565b005b6102d560048036038101906102d091906116ce565b61112b565b005b6102f160048036038101906102ec9190611728565b611235565b6040516102fe919061191f565b60405180910390f35b610321600480360381019061031c91906116ce565b611274565b60405161032e91906119bc565b60405180910390f35b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6103c93373ffffffffffffffffffffffffffffffffffffffff166112ca565b15610409576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040090611a77565b60405180910390fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111610490576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048790611a17565b60405180910390fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506104ea816007546112ed90919063ffffffff16565b600781905550600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161054d929190611971565b602060405180830381600087803b15801561056757600080fd5b505af115801561057b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059f91906116fb565b50600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610645576002546003805490501161063b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063290611a97565b60405180910390fd5b61064433611303565b5b803373ffffffffffffffffffffffffffffffffffffffff167f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f7560405160405180910390a350565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461071a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071190611a37565b60405180910390fd5b600060025490508160028190555081813373ffffffffffffffffffffffffffffffffffffffff167f6eb5ec46450e0c6e94bb67a32e6bca9ec9ff819009505cbc6b886caf512d37bc60405160405180910390a45050565b6000600754905090565b6000600154905090565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610813576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080a90611a37565b60405180910390fd5b600154600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610897576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088e90611ab7565b60405180910390fd5b600380549050600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506003819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8064a302796c89446a96d63470b5b036212da26bd2debe5bec73e0170a9a5e8360405160405180910390a350565b6000600254905090565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610a90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8790611a37565b60405180910390fd5b610a9a60006115b5565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610b53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4a90611a37565b60405180910390fd5b600060015490508160018190555081813373ffffffffffffffffffffffffffffffffffffffff167fed4e7b6d1951b75b13e101295f8473d6492319d89608bbfbfdbc643d96246f7d60405160405180910390a45050565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610c38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2f90611a37565b60405180910390fd5b60025460038054905011610c81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7890611a97565b60405180910390fd5b610c8a81611303565b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4edebfc5ffaa4271f94ab363e643701124f2b4381b7a4f614dbdf75f166dc0cb60405160405180910390a350565b610d063373ffffffffffffffffffffffffffffffffffffffff166112ca565b15610d46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3d90611a77565b60405180910390fd5b60008111610d89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d80906119f7565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401610de89392919061193a565b602060405180830381600087803b158015610e0257600080fd5b505af1158015610e16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3a91906116fb565b50610e8d81600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461167990919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610ee58160075461167990919063ffffffff16565b600781905550803373ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d60405160405180910390a350565b60606003805480602002602001604051908101604052809291908181526020018280548015610fb657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610f6c575b5050505050905090565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461104e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104590611a37565b60405180910390fd5b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f48a312d70029e6dd97980e9e051e1ff0b8b8be967450af46ce6dc5fa9830428f60405160405180910390a45050565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146111b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b090611a37565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611229576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611220906119d7565b60405180910390fd5b611232816115b5565b50565b6003818154811061124557600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600081836112fb9190611b92565b905092915050565b600380549050600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410611389576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138090611a57565b60405180910390fd5b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060006113e860016003805490506112ed90919063ffffffff16565b90508082146114d75760006003828154811061140757611406611c6c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050806003848154811061144957611448611c6c565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff0219169055600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009055600380548061157b5761157a611c3d565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081836116879190611b3c565b905092915050565b60008135905061169e81611e34565b92915050565b6000815190506116b381611e4b565b92915050565b6000813590506116c881611e62565b92915050565b6000602082840312156116e4576116e3611c9b565b5b60006116f28482850161168f565b91505092915050565b60006020828403121561171157611710611c9b565b5b600061171f848285016116a4565b91505092915050565b60006020828403121561173e5761173d611c9b565b5b600061174c848285016116b9565b91505092915050565b6000611761838361176d565b60208301905092915050565b61177681611bc6565b82525050565b61178581611bc6565b82525050565b600061179682611b02565b6117a08185611b1a565b93506117ab83611af2565b8060005b838110156117dc5781516117c38882611755565b97506117ce83611b0d565b9250506001810190506117af565b5085935050505092915050565b6117f281611bd8565b82525050565b6000611805602683611b2b565b915061181082611ca0565b604082019050919050565b6000611828600e83611b2b565b915061183382611cef565b602082019050919050565b600061184b601d83611b2b565b915061185682611d18565b602082019050919050565b600061186e601c83611b2b565b915061187982611d41565b602082019050919050565b6000611891601283611b2b565b915061189c82611d6a565b602082019050919050565b60006118b4601a83611b2b565b91506118bf82611d93565b602082019050919050565b60006118d7602583611b2b565b91506118e282611dbc565b604082019050919050565b60006118fa601d83611b2b565b915061190582611e0b565b602082019050919050565b61191981611c04565b82525050565b6000602082019050611934600083018461177c565b92915050565b600060608201905061194f600083018661177c565b61195c602083018561177c565b6119696040830184611910565b949350505050565b6000604082019050611986600083018561177c565b6119936020830184611910565b9392505050565b600060208201905081810360008301526119b4818461178b565b905092915050565b60006020820190506119d160008301846117e9565b92915050565b600060208201905081810360008301526119f0816117f8565b9050919050565b60006020820190508181036000830152611a108161181b565b9050919050565b60006020820190508181036000830152611a308161183e565b9050919050565b60006020820190508181036000830152611a5081611861565b9050919050565b60006020820190508181036000830152611a7081611884565b9050919050565b60006020820190508181036000830152611a90816118a7565b9050919050565b60006020820190508181036000830152611ab0816118ca565b9050919050565b60006020820190508181036000830152611ad0816118ed565b9050919050565b6000602082019050611aec6000830184611910565b92915050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000611b4782611c04565b9150611b5283611c04565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611b8757611b86611c0e565b5b828201905092915050565b6000611b9d82611c04565b9150611ba883611c04565b925082821015611bbb57611bba611c0e565b5b828203905092915050565b6000611bd182611be4565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f496e76616c696420616d6f756e74000000000000000000000000000000000000600082015250565b7f4f6e6c79207374616b65722063616e2063616c6c2066756e6374696f6e000000600082015250565b7f4f6e6c79206f776e65722063616e2063616c6c2066756e6374696f6e00000000600082015250565b7f696e646578206f7574206f662072616e67650000000000000000000000000000600082015250565b7f4f6e6c7920454f412063616e2063616c6c2066756e6374696f6e000000000000600082015250565b7f56616c696461746f72732063616e2774206265206c657373207468616e206d6960008201527f6e696d756d000000000000000000000000000000000000000000000000000000602082015250565b7f4163636f756e74206d757374206265207374616b656420656e6f756768000000600082015250565b611e3d81611bc6565b8114611e4857600080fd5b50565b611e5481611bd8565b8114611e5f57600080fd5b50565b611e6b81611c04565b8114611e7657600080fd5b5056fea2646970667358221220bff7c16b83df0545a708dd45b710932652825206ecea75064c41a0e49e9cffa464736f6c63430008060033"
)

// PredeploySC is a helper method for setting up the ValidatorSet smart contract account,
// using the passed in validators as pre-staked validators
func PredeploySC(params PredeployParams) (*chain.GenesisAccount, error) {
	// Set the code for the staking smart contract
	// Code retrieved from https://github.com/dogechain-lab/dogechain-contracts
	scHex, _ := hex.DecodeHex(StakingSCBytecode)
	stakingAccount := &chain.GenesisAccount{
		Code: scHex,
	}

	if params.Owner == types.ZeroAddress {
		return nil, errors.New("contract owner should not be empty")
	}

	// Generate the empty account storage map
	storageMap := make(map[types.Hash]types.Hash)
	bigOne := big.NewInt(1)
	bigTrueValue := big.NewInt(1)
	stakedAmount := big.NewInt(0)

	for indx, validator := range params.Validators {
		// Get the storage indexes
		storageIndexes := getStorageIndexes(validator, int64(indx))

		// Set the value for the owner
		storageMap[types.BytesToHash(storageIndexes.OwnerIndex)] =
			types.BytesToHash(params.Owner.Bytes())

		// Set the value for the owner
		storageMap[types.BytesToHash(storageIndexes.MinimumIndex)] =
			types.BytesToHash(bigOne.Bytes())

		// Set the value for the validators array
		storageMap[types.BytesToHash(storageIndexes.ValidatorsIndex)] =
			types.BytesToHash(
				validator.Bytes(),
			)

		// Set the value for the address -> validator array index mapping
		storageMap[types.BytesToHash(storageIndexes.AddressToIsValidatorIndex)] =
			types.BytesToHash(bigTrueValue.Bytes())

		// Set the value for the address -> validator index mapping
		storageMap[types.BytesToHash(storageIndexes.AddressToValidatorIndexIndex)] =
			types.StringToHash(hex.EncodeUint64(uint64(indx)))

		// Set the value for the total staked amount
		storageMap[types.BytesToHash(storageIndexes.StakedAmountIndex)] =
			types.BytesToHash(stakedAmount.Bytes())

		// Set the value for the size of the validators array
		storageMap[types.BytesToHash(storageIndexes.ValidatorsArraySizeIndex)] =
			types.StringToHash(hex.EncodeUint64(uint64(indx + 1)))
	}

	// Save the storage map
	stakingAccount.Storage = storageMap

	// Set the Staking SC balance to numValidators * defaultStakedBalance
	stakingAccount.Balance = stakedAmount

	return stakingAccount, nil
}
