---
name: QA
on:
  push:
    branches:
      - main
      - dev
  pull_request:
  workflow_dispatch:
  workflow_call:

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: "1.17.x"

      - name: Lint
        uses: golangci/golangci-lint-action@v3

  build:
    name: Build Dogechain
    runs-on: ubuntu-latest
    needs:
      - lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup Go environment
        # uses: actions/setup-go@v3.3.0
        uses: actions/setup-go@v2
        with:
          go-version: "1.17.x"

      - name: Build Dogechain
        run: |
          go build -a -o dogechain -ldflags="\
            -X 'github.com/dogechain-lab/dogechain/versioning.Version=${GITHUB_REF_NAME}' \
            -X 'github.com/dogechain-lab/dogechain/versioning.Commit=${GITHUB_COMMIT_HASH}' \
            -X 'github.com/dogechain-lab/dogechain/versioning.BuildTime=${GITHUB_BUILT_AT}' \
            -extldflags '"-Wl,-z,stack-size=0x800000" "-static"' "\
            -tags 'osusergo netgo static_build' && tar -czvf dogechain.tar.gz dogechain
        env:
          CGO_ENABLED: 0
          CC: gcc
          CXX: g++
          GOARC: amd64
          GOOS: linux
          GITHUB_COMMIT_HASH: ${{ github.sha }}
          GITHUB_BUILT_AT: ${{ github.event.head_commit.timestamp }}

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: "Upload Artifact"
        uses: actions/upload-artifact@v3
        with:
          name: dogechain_${{ github.sha }}_${{ steps.extract_branch.outputs.branch }}
          path: dogechain.tar.gz
          retention-days: 7

  tests:
    name: Run unit tests
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: "1.17.x"

      - name: Run Go Test
        run: go test -coverprofile coverage.out -timeout 20m `go list ./... | grep -v e2e`

      - name: Upload coverage file to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: coverage.out

  e2e-tests:
    name: Run e2e tests
    runs-on: ubuntu-latest
    needs:
      - tests
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: "1.17.x"

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Run tests
        run: make test-e2e
